{
	"compilerOptions": {
		"allowJs": false,
		"skipLibCheck": true, // Skip type checking of default library declaration files.
    	"strict": true, // When set, TypeScript will check that the built-in methods of functions call, bind, and apply are invoked with correct argument for the underlying function:
		"strictPropertyInitialization": false, // When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor.
    	"forceConsistentCasingInFileNames": true, // TypeScript follows the case sensitivity rules of the file system it’s running on. This can be problematic if some developers are working in a case-sensitive file system and others aren’t. If a file attempts to import fileManager.ts by specifying ./FileManager.ts the file will be found in a case-insensitive file system, but not on a case-sensitive file system.
		"allowSyntheticDefaultImports": true, // allows you to write import without star
		"target": "es5", // setting changes which JS features are downleveled and which are left intact. For example, an arrow function () => this will be turned into an equivalent function expression if target is ES5 or lower.
		"downlevelIteration": true, // Downleveling is TypeScript’s term for transpiling to an older version of JavaScript. This flag is to enable support for a more accurate implementation of how modern JavaScript iterates through new concepts in older JavaScript runtimes.
		"module": "commonjs", // CommonJS is default if target=es5
		"moduleResolution": "node", // node as default strategy
		"sourceMap": true, // Enables the generation of sourcemap files for display the original TypeScript source code
		"emitDecoratorMetadata": true, // Enables experimental support for emitting type metadata for decorators which works with the module
		"experimentalDecorators": true,
		"removeComments": false,
		"noEmit": false, // Do not emit compiler output files like JavaScript source code, source-maps or declarations.
		"noEmitOnError": true, // Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.
		"noImplicitAny": true, // In some cases where no type annotations are present, TypeScript will fall back to a type of any for a variable when it cannot infer the type.
		"esModuleInterop": true, // Import CommonJS modules in compliance with es5 modules spec.
		"jsx": "react",
		"outDir": "build",
		"lib": [
			"ESNext",
			"DOM",
			"ES2015.Promise"
		], // TypeScript includes a default set of type definitions for built-in JS APIs (like Math), as well as type definitions for things found in browser environments (like document)
		"baseUrl": "src",
		"paths": {
			"@api/*": ["app/api/*"],
			"@assets/*": ["app/assets/*"],
			"@app-types/*": ["app/types/*"],
			"@components/*": ["app/components/*"],
			"@contexts/*": ["app/contexts/*"],
			"@routes/*": ["app/routes/*"],
			"@hooks/*": ["app/hooks/*"],
			"@icons/*": ["app/icons/*"],
			"@stores/*": ["app/stores/*"],
			"@app-styles/*": ["app/styles/*"],
			"@mocks/*": ["app/mocks/*"],
			"@utils/*": ["app/utils/*"],
			"@views/*": ["app/views/*"],
			"@helpers/*": ["helpers/*"],
			"@config": ["config/*"],
			"@constants": ["constants.ts"]
		},
		"plugins": [{ "name": "typescript-plugin-css-modules" }]
	},
	"include": ["src"],
  	"exclude": ["node_modules"]
}
